// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String
  avatar            String?
  organization      String?
  jobTitle          String?
  linkedIn          String?
  location          String?
  posts             Post[]
  likes             Like[]
  comments          Comment[]
  shares            Share[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Connections
  sentConnections     Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")

  // Notifications
  notifications       Notification[]
}

model Post {
  id           String       @id @default(cuid())
  content      String
  imageUrl     String?
  category     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes        Like[]
  comments     Comment[]
  shares       Share[]

  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Connection {
  id          String   @id @default(cuid())
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender      User     @relation("SentConnections", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("ReceivedConnections", fields: [receiverId], references: [id])
  receiverId  String

  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id          String   @id @default(cuid())
  type        String
  message     String
  read        Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
}
