// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  avatar        String?
  organization  String?
  jobTitle      String?
  linkedIn      String?
  location      String?
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followers     Follow[]  @relation("follower")
  following     Follow[]  @relation("following")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PostCategory {
  THOUGHT_LEADERSHIP
  NEWS
  EVENTS
  BLOG_POST
  BOOKS
  COURSES
  PODCASTS
  PRESENTATIONS
  PRESS_RELEASES
  TEMPLATES
  VIDEOS
  WEBINARS
  CASE_STUDIES
  WHITEPAPERS
}

model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  category  PostCategory
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]
  likeCount Int      @default(0)
  comments  Comment[]

  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}
